(()=>{var e={208:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var r=t(354),o=t.n(r),i=t(314),s=t.n(i)()(o());s.push([e.id,"body {\n    height: 95svh;\n    /*border: 2px dashed blue;*/\n    display: flex;\n    flex-direction: column;\n}\n\nheader{\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n}\n\ncontainer {\n    /*border: 2px dashed red;*/\n    display: none;\n    flex-wrap: wrap;\n    justify-content: center;\n    height: 100%;\n}\n\ncontainer > div {\n    margin: 1em 1em 1em 1em;\n    width: 30%;\n    /*border: 1px solid greenyellow;*/\n    padding: 1em 1em 1em 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content : center;\n    align-items: center;\n    width: clamp(40px, 50%, 400px) ;\n}\n\n    .player {\n        \n    }\n    .AI {\n    }\n\n        .field {\n            /*border: 1px dashed black;*/\n            height: 20em;\n            width: 20em;\n            display: grid;\n            grid-template-columns: repeat(10, 10%);\n            grid-template-rows: repeat(10, auto);\n        }\n\n        .field > div {\n            border: 1px solid black;\n        }\n        .name {\n            margin: 1em 1em 1em 1em;\n        }\n\n\nfooter{\n    /*border: 1px solid red;*/\n    align-self: center;\n    position: fixed;\n    bottom: 5px;\n    background-color: rgb(159, 235, 235);\n    width: 100vw;\n    height: 30px;\n    text-align: center;\n    text-justify:newspaper;\n}\n\n.positionsboard {\n    background-color: bisque;\n    opacity: 0.9 ;\n    position: absolute;\n    top: 0;\n    width: 95vw;\n    height: 95vh;\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n    border: 1px solid red;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    align-content: center;\n}\n    \n    .positionsboard > div {\n        /*border: 1px solid red;*/\n        width: 95vw;\n        margin: 1rem 1rem 1rem 1rem ;\n    }\n    .positionsboard > button {\n        font-size: xx-large;\n        width: 5vw;\n        height: 5vw;\n    }\n    .positionsboard > .field1 {\n        /*border: 1px dashed greenyellow;*/\n        background-color: white;\n        height: 50vh;\n        width: 50vh;\n        display: grid;\n        grid-template-columns: repeat(10, auto);\n        grid-template-rows: repeat(10, auto);\n    }\n        .field1 > div {\n        border: 1px solid black;\n        background-color: blueviolet;\n        opacity: 1;\n        }\n.red {\n    background-color:aquamarine;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,2BAA2B;IAC3B,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,wBAAwB;IACxB,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,UAAU;IACV,iCAAiC;IACjC,wBAAwB;IACxB,aAAa;IACb,sBAAsB;IACtB,wBAAwB;IACxB,mBAAmB;IACnB,+BAA+B;AACnC;;IAEI;;IAEA;IACA;IACA;;QAEI;YACI,4BAA4B;YAC5B,YAAY;YACZ,WAAW;YACX,aAAa;YACb,sCAAsC;YACtC,oCAAoC;QACxC;;QAEA;YACI,uBAAuB;QAC3B;QACA;YACI,uBAAuB;QAC3B;;;AAGR;IACI,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;IACf,WAAW;IACX,oCAAoC;IACpC,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,wBAAwB;IACxB,kBAAkB;IAClB,qBAAqB;IACrB,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;AACzB;;IAEI;QACI,yBAAyB;QACzB,WAAW;QACX,4BAA4B;IAChC;IACA;QACI,mBAAmB;QACnB,UAAU;QACV,WAAW;IACf;IACA;QACI,kCAAkC;QAClC,uBAAuB;QACvB,YAAY;QACZ,WAAW;QACX,aAAa;QACb,uCAAuC;QACvC,oCAAoC;IACxC;QACI;QACA,uBAAuB;QACvB,4BAA4B;QAC5B,UAAU;QACV;AACR;IACI,2BAA2B;AAC/B",sourcesContent:["body {\n    height: 95svh;\n    /*border: 2px dashed blue;*/\n    display: flex;\n    flex-direction: column;\n}\n\nheader{\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n}\n\ncontainer {\n    /*border: 2px dashed red;*/\n    display: none;\n    flex-wrap: wrap;\n    justify-content: center;\n    height: 100%;\n}\n\ncontainer > div {\n    margin: 1em 1em 1em 1em;\n    width: 30%;\n    /*border: 1px solid greenyellow;*/\n    padding: 1em 1em 1em 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content : center;\n    align-items: center;\n    width: clamp(40px, 50%, 400px) ;\n}\n\n    .player {\n        \n    }\n    .AI {\n    }\n\n        .field {\n            /*border: 1px dashed black;*/\n            height: 20em;\n            width: 20em;\n            display: grid;\n            grid-template-columns: repeat(10, 10%);\n            grid-template-rows: repeat(10, auto);\n        }\n\n        .field > div {\n            border: 1px solid black;\n        }\n        .name {\n            margin: 1em 1em 1em 1em;\n        }\n\n\nfooter{\n    /*border: 1px solid red;*/\n    align-self: center;\n    position: fixed;\n    bottom: 5px;\n    background-color: rgb(159, 235, 235);\n    width: 100vw;\n    height: 30px;\n    text-align: center;\n    text-justify:newspaper;\n}\n\n.positionsboard {\n    background-color: bisque;\n    opacity: 0.9 ;\n    position: absolute;\n    top: 0;\n    width: 95vw;\n    height: 95vh;\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n    border: 1px solid red;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    align-content: center;\n}\n    \n    .positionsboard > div {\n        /*border: 1px solid red;*/\n        width: 95vw;\n        margin: 1rem 1rem 1rem 1rem ;\n    }\n    .positionsboard > button {\n        font-size: xx-large;\n        width: 5vw;\n        height: 5vw;\n    }\n    .positionsboard > .field1 {\n        /*border: 1px dashed greenyellow;*/\n        background-color: white;\n        height: 50vh;\n        width: 50vh;\n        display: grid;\n        grid-template-columns: repeat(10, auto);\n        grid-template-rows: repeat(10, auto);\n    }\n        .field1 > div {\n        border: 1px solid black;\n        background-color: blueviolet;\n        opacity: 1;\n        }\n.red {\n    background-color:aquamarine;\n}\n\n"],sourceRoot:""}]);const a=s},314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&s[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],d=r.base?l[0]+r.base:l[0],c=i[d]||0,A="".concat(d," ").concat(c);i[d]=c+1;var u=t(A),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(h);else{var p=o(h,r);r.byIndex=a,n.splice(a,0,{identifier:A,updater:p,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=t(i[s]);n[a].references--}for(var l=r(e,o),d=0;d<i.length;d++){var c=t(i[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}i=l}}},659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},616:(e,n,t)=>{const r=t(306),o=t(400);let i=new o(5,"carrieer"),s=new o(4,"battleship"),a=new o(3,"cruiser"),l=new o(3,"submarine"),d=new o(2,"destroyer");const c=new class{constructor(){this.board=new r}bomb(){}randomBomb(e){let n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());if(!e.Board.board[n][t].hit)return e.Board.receiveAttack(n,t),void(e.turn=!0);this.randomBomb(e)}placeShip(e){let n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());Math.floor(10*Math.random())>5?e.position=!0:e.position=!1;let r=n,o=t,i=!0;for(let n=0;n<e.length;n++){if(r>9||o>9||this.board.board[r][o].ship){i=!1;break}e.position?o++:r++}i?this.board.placeShips(e,n,t):this.placeShip(e)}};c.placeShip(i),c.placeShip(s),c.placeShip(a),c.placeShip(l),c.placeShip(d),e.exports=c},306:e=>{e.exports=class{constructor(){this.board=[[null],[null],[null],[null],[null],[null],[null],[null],[null],[null]],this.ships=5,this.allSink=!1;for(let e=0;e<10;e++)for(let n=0;n<10;n++)this.board[e][n]={ship:null,hit:!1}}placeShips(e,n,t){if(n<0||n>10||t<0||t>10)console.log("wrong coordinates !");else for(let r=0;r<e.length;r++)this.board[n][t].ship=e,e.position?t++:n++}receiveAttack(e,n){if(this.board[e][n].ship){let t=this.board[e][n].ship;t.hit(),this.board[e][n].hit=!0,t.sunk&&this.ships--}else this.board[e][n].hit=!0;0==this.ships&&(this.allSink=!0)}}},403:(e,n,t)=>{const r=t(306);let o=new class{constructor(){this.Board=new r,this.turn=!0}};e.exports=o},400:e=>{e.exports=class{constructor(e,n){this.name=n,this.length=e,this.hits=0,this.sunk=!1,this.position=!0}hit(){this.hits++,this.length==this.hits&&this.isSunk()}isSunk(){this.sunk=!0}reposition(){1==this.position?this.position=!1:this.position=!0}}},288:e=>{e.exports=function(e){const n=document.querySelectorAll(e);if(n[0])for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=document.createElement("div");r.id=`p${e}${t}`,n[0].appendChild(r)}if(n[1])for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=document.createElement("div");r.id=`a${e}${t}`,n[1].appendChild(r)}}},732:e=>{e.exports=class{constructor(e,n=5,t=!0){this.div=e,this.num=n,this.h=t,this.hv=this.h?1:10,this.place=!0}turn(e=this.h){e?(this.h=!1,this.hv=10):(this.h=!0,this.hv=1)}hovering(){const e=document.querySelectorAll(this.div);e.forEach((n=>{n.addEventListener("mouseover",(()=>{if("black"!=n.style.backgroundColor){for(let t=0;t<this.num;t++)if(e[+n.id.substring(1,3)+t*this.hv]&&"black"==e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor)return void(this.place=!1);n.style.backgroundColor="greenyellow";for(let t=0;t<this.num;t++)if(e[+n.id.substring(1,3)+t*this.hv]&&(+n.id.substring(1,3)+t<10*n.id.substring(1,2)+10||!this.h))e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor="greenyellow",this.place=!0;else if(e[+n.id.substring(1,3)+t*this.hv])for(let t=0;t<this.num;t++)e[+n.id.substring(1,3)+t*this.hv]&&+n.id.substring(1,3)+t<10*n.id.substring(1,2)+10&&(e[+n.id.substring(1,3)+t].style.backgroundColor="red",this.place=!1);else for(let t=0;t<this.num;t++)e[+n.id.substring(1,3)+t*this.hv]&&(e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor="red",this.place=!1)}else this.place=!1}),!0)})),e.forEach((n=>n.addEventListener("mouseout",(()=>{if("black"!=n.style.backgroundColor){for(let t=0;t<this.num;t++)if(e[+n.id.substring(1,3)+t*this.hv]&&"black"==e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor)return;if("black"!=n.style.backgroundColor){n.style.backgroundColor="blueviolet";for(let t=0;t<this.num;t++)e[+n.id.substring(1,3)+t*this.hv]&&(+n.id.substring(1,3)+t<10*n.id.substring(1,2)+10||!this.h)&&(e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor="blueviolet")}}}))))}}},214:(e,n,t)=>{const r=t(288),o=t(732),i=t(403),s=t(400);let a=new s(5,"carrieer"),l=new s(4,"battleship"),d=new s(3,"cruiser"),c=new s(3,"submarine"),A=new s(2,"destroyer"),u=a,h=new o(".field1 > div",5,!0);r(".field"),r(".field1");const p=document.querySelector("button"),b=document.querySelectorAll(".field1 > div"),m=document.querySelector(".positionsboard"),f=document.querySelector("container"),g=document.querySelector(".positionsboard > div > span"),C=document.querySelector(".hv"),v=document.querySelectorAll(".AI > .field > div");function B(e,n){for(let t=0;t<10;t++)for(let r=0;r<10;r++)e[t][r].ship?n[10*t+r].style.backgroundColor="black":n[10*t+r].style.backgroundColor=""}e.exports=function(){h.hovering(),p.addEventListener("click",(()=>{u.reposition(),h.turn(!u.position),h.num=u.length,h.hovering(),C.textContent=u.position?"Horizently":"Vertecly"})),b.forEach((e=>{e.addEventListener("click",(()=>{h.place&&(i.Board.placeShips(u,e.id.substring(1,2),e.id.substring(2,3)),B(i.Board.board,b),function(){switch(u){case a:u=l;break;case l:u=d;break;case d:u=c;break;case c:u=A;break;default:m.style.display="none",f.style.display="flex",B(i.Board.board,v)}}(),h.turn(!u.position),h.h=u.position,h.num=u.length,g.textContent=u.name,h.place=!1,C.textContent=u.position?" Horizently ":" Vertecly ")}))}))}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{"use strict";var e=t(72),n=t.n(e),r=t(825),o=t.n(r),i=t(659),s=t.n(i),a=t(56),l=t.n(a),d=t(540),c=t.n(d),A=t(113),u=t.n(A),h=t(208),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=s().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=c(),n()(h.A,p),h.A&&h.A.locals&&h.A.locals;const b=t(214),m=t(616),f=t(403);b();const g=document.querySelectorAll(".player > .field > div"),C=document.querySelectorAll(".AI > .field > div");g.forEach((e=>{e.addEventListener("click",(()=>{f.turn&&!m.board.board[e.id.substring(1,2)][e.id.substring(2,3)].hit&&(m.board.receiveAttack(e.id.substring(1,2),e.id.substring(2,3)),f.turn=!1,m.board.board[e.id.substring(1,2)][e.id.substring(2,3)].ship?e.style.backgroundColor="greenyellow":e.style.backgroundColor="red"),m.randomBomb(f),function(e,n){for(let t=0;t<10;t++)for(let r=0;r<10;r++)e[t][r].ship?e[t][r].hit?n[10*t+r].style.backgroundColor="greenyellow":n[10*t+r].style.backgroundColor="black":e[t][r].hit?n[10*t+r].style.backgroundColor="red":n[10*t+r].style.backgroundColor=""}(f.Board.board,C),m.board.allSink&&console.log("game over you win"),f.Board.allSink&&console.log("game over you lost")}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,