(()=>{var e={208:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var r=t(354),o=t.n(r),i=t(314),s=t.n(i)()(o());s.push([e.id,"body {\n    height: 95svh;\n    /*border: 2px dashed blue;*/\n    display: flex;\n    flex-direction: column;\n}\n\nheader{\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n}\n\ncontainer {\n    /*border: 2px dashed red;*/\n    display: none;\n    flex-wrap: wrap;\n    justify-content: center;\n    height: 100%;\n}\n\ncontainer > div {\n    margin: 1em 1em 1em 1em;\n    width: 30%;\n    /*border: 1px solid greenyellow;*/\n    padding: 1em 1em 1em 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content : center;\n    align-items: center;\n    width: clamp(40px, 50%, 400px) ;\n}\n\n    .player {\n        \n    }\n    .AI {\n    }\n\n        .field {\n            /*border: 1px dashed black;*/\n            height: 20em;\n            width: 20em;\n            display: grid;\n            grid-template-columns: repeat(10, 10%);\n            grid-template-rows: repeat(10, auto);\n        }\n\n        .field > div {\n            border: 1px solid black;\n        }\n        .name {\n            margin: 1em 1em 1em 1em;\n        }\n\n\nfooter{\n    /*border: 1px solid red;*/\n    align-self: center;\n    position: fixed;\n    bottom: 5px;\n    background-color: rgb(159, 235, 235);\n    width: 100vw;\n    height: 30px;\n    text-align: center;\n    text-justify:newspaper;\n}\n\n.positionsboard {\n    background-color: bisque;\n    opacity: 0.9 ;\n    position: absolute;\n    top: 0;\n    width: 95vw;\n    height: 95vh;\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n    border: 1px solid red;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    align-content: center;\n}\n    \n    .positionsboard > div {\n        /*border: 1px solid red;*/\n        width: 95vw;\n        margin: 1rem 1rem 1rem 1rem ;\n    }\n    .positionsboard > button {\n        font-size: xx-large;\n        width: 5vw;\n        height: 5vw;\n    }\n    .positionsboard > .field1 {\n        /*border: 1px dashed greenyellow;*/\n        background-color: white;\n        height: 50vh;\n        width: 50vh;\n        display: grid;\n        grid-template-columns: repeat(10, auto);\n        grid-template-rows: repeat(10, auto);\n    }\n        .field1 > div {\n        border: 1px solid black;\n        background-color: blueviolet;\n        opacity: 1;\n        }\n.red {\n    background-color:aquamarine;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,2BAA2B;IAC3B,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,wBAAwB;IACxB,kBAAkB;AACtB;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,UAAU;IACV,iCAAiC;IACjC,wBAAwB;IACxB,aAAa;IACb,sBAAsB;IACtB,wBAAwB;IACxB,mBAAmB;IACnB,+BAA+B;AACnC;;IAEI;;IAEA;IACA;IACA;;QAEI;YACI,4BAA4B;YAC5B,YAAY;YACZ,WAAW;YACX,aAAa;YACb,sCAAsC;YACtC,oCAAoC;QACxC;;QAEA;YACI,uBAAuB;QAC3B;QACA;YACI,uBAAuB;QAC3B;;;AAGR;IACI,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;IACf,WAAW;IACX,oCAAoC;IACpC,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,wBAAwB;IACxB,kBAAkB;IAClB,qBAAqB;IACrB,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;AACzB;;IAEI;QACI,yBAAyB;QACzB,WAAW;QACX,4BAA4B;IAChC;IACA;QACI,mBAAmB;QACnB,UAAU;QACV,WAAW;IACf;IACA;QACI,kCAAkC;QAClC,uBAAuB;QACvB,YAAY;QACZ,WAAW;QACX,aAAa;QACb,uCAAuC;QACvC,oCAAoC;IACxC;QACI;QACA,uBAAuB;QACvB,4BAA4B;QAC5B,UAAU;QACV;AACR;IACI,2BAA2B;AAC/B",sourcesContent:["body {\n    height: 95svh;\n    /*border: 2px dashed blue;*/\n    display: flex;\n    flex-direction: column;\n}\n\nheader{\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n}\n\ncontainer {\n    /*border: 2px dashed red;*/\n    display: none;\n    flex-wrap: wrap;\n    justify-content: center;\n    height: 100%;\n}\n\ncontainer > div {\n    margin: 1em 1em 1em 1em;\n    width: 30%;\n    /*border: 1px solid greenyellow;*/\n    padding: 1em 1em 1em 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content : center;\n    align-items: center;\n    width: clamp(40px, 50%, 400px) ;\n}\n\n    .player {\n        \n    }\n    .AI {\n    }\n\n        .field {\n            /*border: 1px dashed black;*/\n            height: 20em;\n            width: 20em;\n            display: grid;\n            grid-template-columns: repeat(10, 10%);\n            grid-template-rows: repeat(10, auto);\n        }\n\n        .field > div {\n            border: 1px solid black;\n        }\n        .name {\n            margin: 1em 1em 1em 1em;\n        }\n\n\nfooter{\n    /*border: 1px solid red;*/\n    align-self: center;\n    position: fixed;\n    bottom: 5px;\n    background-color: rgb(159, 235, 235);\n    width: 100vw;\n    height: 30px;\n    text-align: center;\n    text-justify:newspaper;\n}\n\n.positionsboard {\n    background-color: bisque;\n    opacity: 0.9 ;\n    position: absolute;\n    top: 0;\n    width: 95vw;\n    height: 95vh;\n    align-self: center;\n    font-size: 200%;\n    padding: 1em 1em 1em 1em;\n    text-align: center;\n    border: 1px solid red;\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    align-content: center;\n}\n    \n    .positionsboard > div {\n        /*border: 1px solid red;*/\n        width: 95vw;\n        margin: 1rem 1rem 1rem 1rem ;\n    }\n    .positionsboard > button {\n        font-size: xx-large;\n        width: 5vw;\n        height: 5vw;\n    }\n    .positionsboard > .field1 {\n        /*border: 1px dashed greenyellow;*/\n        background-color: white;\n        height: 50vh;\n        width: 50vh;\n        display: grid;\n        grid-template-columns: repeat(10, auto);\n        grid-template-rows: repeat(10, auto);\n    }\n        .field1 > div {\n        border: 1px solid black;\n        background-color: blueviolet;\n        opacity: 1;\n        }\n.red {\n    background-color:aquamarine;\n}\n\n"],sourceRoot:""}]);const a=s},314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&s[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],d=r.base?l[0]+r.base:l[0],c=i[d]||0,A="".concat(d," ").concat(c);i[d]=c+1;var u=t(A),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(h);else{var p=o(h,r);r.byIndex=a,n.splice(a,0,{identifier:A,updater:p,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=t(i[s]);n[a].references--}for(var l=r(e,o),d=0;d<i.length;d++){var c=t(i[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}i=l}}},659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},616:(e,n,t)=>{const r=t(306),o=t(400);let i=new o(5,"carrieer"),s=new o(4,"battleship"),a=new o(3,"cruiser"),l=new o(3,"submarine"),d=new o(2,"destroyer");const c=new class{constructor(){this.board=new r}bomb(){}randomBomb(e){let n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());if(!e.Board.board[n][t].hit)return e.Board.receiveAttack(n,t),void(e.turn=!0);this.randomBomb(e)}placeShip(e){let n=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());Math.floor(10*Math.random())>5?e.position=!0:e.position=!1;let r=n,o=t,i=!0;for(let n=0;n<e.length;n++){if(r>9||o>9||this.board.board[r][o].ship){i=!1;break}e.position?o++:r++}i?this.board.placeShips(e,n,t):this.placeShip(e)}};c.placeShip(i),c.placeShip(s),c.placeShip(a),c.placeShip(l),c.placeShip(d),e.exports=c},306:e=>{e.exports=class{constructor(){this.board=[[null],[null],[null],[null],[null],[null],[null],[null],[null],[null]],this.ships=5,this.allSink=!1;for(let e=0;e<10;e++)for(let n=0;n<10;n++)this.board[e][n]={ship:null,hit:!1}}placeShips(e,n,t){if(n<0||n>10||t<0||t>10)console.log("wrong coordinates !");else for(let r=0;r<e.length;r++)this.board[n][t].ship=e,e.position?t++:n++}receiveAttack(e,n){if(this.board[e][n].ship){let t=this.board[e][n].ship;t.hit(),this.board[e][n].hit=!0,t.sunk&&this.ships--}else this.board[e][n].hit=!0;0==this.ships&&(this.allSink=!0)}}},403:(e,n,t)=>{const r=t(306);let o=new class{constructor(){this.Board=new r,this.turn=!0}};e.exports=o},400:e=>{e.exports=class{constructor(e,n){this.name=n,this.length=e,this.hits=0,this.sunk=!1,this.position=!0}hit(){this.hits++,this.length==this.hits&&this.isSunk()}isSunk(){this.sunk=!0}reposition(){1==this.position?this.position=!1:this.position=!0}}},288:e=>{e.exports=function(e){const n=document.querySelectorAll(e);if(n[0])for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=document.createElement("div");r.id=`p${e}${t}`,n[0].appendChild(r)}if(n[1])for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=document.createElement("div");r.id=`a${e}${t}`,n[1].appendChild(r)}}},732:e=>{e.exports=class{constructor(e,n=5,t=!0){this.div=e,this.num=n,this.h=t,this.hv=this.h?1:10,this.place=!0}turn(e=this.h){e?(this.h=!1,this.hv=10):(this.h=!0,this.hv=1)}hovering(){const e=document.querySelectorAll(this.div);e.forEach((n=>{n.addEventListener("mouseover",(()=>{if("black"!=n.style.backgroundColor){for(let t=0;t<this.num;t++)if(e[+n.id.substring(1,3)+t*this.hv]&&"black"==e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor)return void(this.place=!1);n.style.backgroundColor="greenyellow";for(let t=0;t<this.num;t++)if(e[+n.id.substring(1,3)+t*this.hv]&&(+n.id.substring(1,3)+t<10*n.id.substring(1,2)+10||!this.h))e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor="greenyellow",this.place=!0;else if(e[+n.id.substring(1,3)+t*this.hv])for(let t=0;t<this.num;t++)e[+n.id.substring(1,3)+t*this.hv]&&+n.id.substring(1,3)+t<10*n.id.substring(1,2)+10&&(e[+n.id.substring(1,3)+t].style.backgroundColor="red",this.place=!1);else for(let t=0;t<this.num;t++)e[+n.id.substring(1,3)+t*this.hv]&&(e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor="red",this.place=!1)}else this.place=!1}),!0)})),e.forEach((n=>n.addEventListener("mouseout",(()=>{if("black"!=n.style.backgroundColor){for(let t=0;t<this.num;t++)if(e[+n.id.substring(1,3)+t*this.hv]&&"black"==e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor)return;if("black"!=n.style.backgroundColor){n.style.backgroundColor="blueviolet";for(let t=0;t<this.num;t++)e[+n.id.substring(1,3)+t*this.hv]&&(+n.id.substring(1,3)+t<10*n.id.substring(1,2)+10||!this.h)&&(e[+n.id.substring(1,3)+t*this.hv].style.backgroundColor="blueviolet")}}}))))}}},214:(e,n,t)=>{const r=t(288),o=t(732),i=t(403),s=t(400);let a=new s(5,"carrieer"),l=new s(4,"battleship"),d=new s(3,"cruiser"),c=new s(3,"submarine"),A=new s(2,"destroyer"),u=a,h=new o(".field1 > div",5,!0);r(".field"),r(".field1");const p=document.querySelector("button"),b=document.querySelectorAll(".field1 > div"),m=document.querySelector(".positionsboard"),f=document.querySelector("container"),g=document.querySelector(".positionsboard > div > span"),C=document.querySelector(".hv"),v=document.querySelectorAll(".AI > .field > div");function B(e,n){for(let t=0;t<10;t++)for(let r=0;r<10;r++)e[t][r].ship?n[10*t+r].style.backgroundColor="black":n[10*t+r].style.backgroundColor=""}e.exports=function(){h.hovering(),p.addEventListener("click",(()=>{u.reposition(),h.turn(!u.position),h.num=u.length,h.hovering(),C.textContent=u.position?"horizontally":"vertically"})),b.forEach((e=>{e.addEventListener("click",(()=>{h.place&&(i.Board.placeShips(u,e.id.substring(1,2),e.id.substring(2,3)),B(i.Board.board,b),function(){switch(u){case a:u=l;break;case l:u=d;break;case d:u=c;break;case c:u=A;break;default:m.style.display="none",f.style.display="flex",B(i.Board.board,v)}}(),h.turn(!u.position),h.h=u.position,h.num=u.length,g.textContent=u.name,h.place=!1,C.textContent=u.position?" horizontally ":" vertically ")}))}))}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{"use strict";var e=t(72),n=t.n(e),r=t(825),o=t.n(r),i=t(659),s=t.n(i),a=t(56),l=t.n(a),d=t(540),c=t.n(d),A=t(113),u=t.n(A),h=t(208),p={};p.styleTagTransform=u(),p.setAttributes=l(),p.insert=s().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=c(),n()(h.A,p),h.A&&h.A.locals&&h.A.locals;const b=t(214),m=t(616),f=t(403);b();const g=document.querySelectorAll(".player > .field > div"),C=document.querySelectorAll(".AI > .field > div");g.forEach((e=>{e.addEventListener("click",(()=>{f.turn&&!m.board.board[e.id.substring(1,2)][e.id.substring(2,3)].hit&&(m.board.receiveAttack(e.id.substring(1,2),e.id.substring(2,3)),f.turn=!1,m.board.board[e.id.substring(1,2)][e.id.substring(2,3)].ship?e.style.backgroundColor="greenyellow":e.style.backgroundColor="red"),m.randomBomb(f),function(e,n){for(let t=0;t<10;t++)for(let r=0;r<10;r++)e[t][r].ship?e[t][r].hit?n[10*t+r].style.backgroundColor="greenyellow":n[10*t+r].style.backgroundColor="black":e[t][r].hit?n[10*t+r].style.backgroundColor="red":n[10*t+r].style.backgroundColor=""}(f.Board.board,C),m.board.allSink&&console.log("game over you win"),f.Board.allSink&&console.log("game over you lost")}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBR3FKLFVBQVUsRUFBRSxJQUNwRTNDLEVBQU9TLE1BQU8sRUFDWHNFLEVBQUdsRixNQUFNQSxNQUFNd0QsRUFBSy9KLEdBQUdxSixVQUFVLEVBQUUsSUFBSVUsRUFBSy9KLEdBQUdxSixVQUFVLEVBQUUsSUFBSXRELEtBQzlEZ0UsRUFBSy9GLE1BQU1vRixnQkFBa0IsY0FHN0JXLEVBQUsvRixNQUFNb0YsZ0JBQWtCLE9BSXJDcUMsRUFBR2hGLFdBQVdDLEdBV3RCLFNBQWlCSCxFQUFPa0QsR0FFcEIsSUFBSyxJQUFJNUksRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3BCLElBQUssSUFBSStHLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNoQnJCLEVBQU0xRixHQUFHK0csR0FBRzdCLEtBQ1JRLEVBQU0xRixHQUFHK0csR0FBR1gsSUFDWndDLEVBQVEsR0FBRjVJLEVBQUsrRyxHQUFHNUQsTUFBTW9GLGdCQUFrQixjQUV0Q0ssRUFBUSxHQUFGNUksRUFBSytHLEdBQUc1RCxNQUFNb0YsZ0JBQWtCLFFBR3RDN0MsRUFBTTFGLEdBQUcrRyxHQUFHWCxJQUNad0MsRUFBUSxHQUFGNUksRUFBSytHLEdBQUc1RCxNQUFNb0YsZ0JBQWtCLE1BRXRDSyxFQUFRLEdBQUY1SSxFQUFLK0csR0FBRzVELE1BQU1vRixnQkFBa0IsRUFLMUQsQ0E3QlFTLENBQVFuRCxFQUFPTSxNQUFNVCxNQUFPb0YsR0FDeEJGLEVBQUdsRixNQUFNb0IsU0FDVEUsUUFBUUMsSUFBSSxxQkFFWnBCLEVBQU9NLE1BQU1XLFNBQ2JFLFFBQVFDLElBQUkscUJBQ2hCLEdBQ0gsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvQUkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9HYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9TaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZmllbGQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9ob3ZlcmluZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luaXRpYWxpemF0aW9uLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGJvZHkge1xuICAgIGhlaWdodDogOTVzdmg7XG4gICAgLypib3JkZXI6IDJweCBkYXNoZWQgYmx1ZTsqL1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuaGVhZGVye1xuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDIwMCU7XG4gICAgcGFkZGluZzogMWVtIDFlbSAxZW0gMWVtO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuY29udGFpbmVyIHtcbiAgICAvKmJvcmRlcjogMnB4IGRhc2hlZCByZWQ7Ki9cbiAgICBkaXNwbGF5OiBub25lO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbmNvbnRhaW5lciA+IGRpdiB7XG4gICAgbWFyZ2luOiAxZW0gMWVtIDFlbSAxZW07XG4gICAgd2lkdGg6IDMwJTtcbiAgICAvKmJvcmRlcjogMXB4IHNvbGlkIGdyZWVueWVsbG93OyovXG4gICAgcGFkZGluZzogMWVtIDFlbSAxZW0gMWVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQgOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogY2xhbXAoNDBweCwgNTAlLCA0MDBweCkgO1xufVxuXG4gICAgLnBsYXllciB7XG4gICAgICAgIFxuICAgIH1cbiAgICAuQUkge1xuICAgIH1cblxuICAgICAgICAuZmllbGQge1xuICAgICAgICAgICAgLypib3JkZXI6IDFweCBkYXNoZWQgYmxhY2s7Ki9cbiAgICAgICAgICAgIGhlaWdodDogMjBlbTtcbiAgICAgICAgICAgIHdpZHRoOiAyMGVtO1xuICAgICAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxMCUpO1xuICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIGF1dG8pO1xuICAgICAgICB9XG5cbiAgICAgICAgLmZpZWxkID4gZGl2IHtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICB9XG4gICAgICAgIC5uYW1lIHtcbiAgICAgICAgICAgIG1hcmdpbjogMWVtIDFlbSAxZW0gMWVtO1xuICAgICAgICB9XG5cblxuZm9vdGVye1xuICAgIC8qYm9yZGVyOiAxcHggc29saWQgcmVkOyovXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBib3R0b206IDVweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTU5LCAyMzUsIDIzNSk7XG4gICAgd2lkdGg6IDEwMHZ3O1xuICAgIGhlaWdodDogMzBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgdGV4dC1qdXN0aWZ5Om5ld3NwYXBlcjtcbn1cblxuLnBvc2l0aW9uc2JvYXJkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBiaXNxdWU7XG4gICAgb3BhY2l0eTogMC45IDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiA5NXZ3O1xuICAgIGhlaWdodDogOTV2aDtcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAyMDAlO1xuICAgIHBhZGRpbmc6IDFlbSAxZW0gMWVtIDFlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xuICAgIGRpc3BsYXk6ZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xufVxuICAgIFxuICAgIC5wb3NpdGlvbnNib2FyZCA+IGRpdiB7XG4gICAgICAgIC8qYm9yZGVyOiAxcHggc29saWQgcmVkOyovXG4gICAgICAgIHdpZHRoOiA5NXZ3O1xuICAgICAgICBtYXJnaW46IDFyZW0gMXJlbSAxcmVtIDFyZW0gO1xuICAgIH1cbiAgICAucG9zaXRpb25zYm9hcmQgPiBidXR0b24ge1xuICAgICAgICBmb250LXNpemU6IHh4LWxhcmdlO1xuICAgICAgICB3aWR0aDogNXZ3O1xuICAgICAgICBoZWlnaHQ6IDV2dztcbiAgICB9XG4gICAgLnBvc2l0aW9uc2JvYXJkID4gLmZpZWxkMSB7XG4gICAgICAgIC8qYm9yZGVyOiAxcHggZGFzaGVkIGdyZWVueWVsbG93OyovXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICBoZWlnaHQ6IDUwdmg7XG4gICAgICAgIHdpZHRoOiA1MHZoO1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgYXV0byk7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCBhdXRvKTtcbiAgICB9XG4gICAgICAgIC5maWVsZDEgPiBkaXYge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZXZpb2xldDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuLnJlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjphcXVhbWFyaW5lO1xufVxuXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2IsMkJBQTJCO0lBQzNCLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHdCQUF3QjtJQUN4QixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSwwQkFBMEI7SUFDMUIsYUFBYTtJQUNiLGVBQWU7SUFDZix1QkFBdUI7SUFDdkIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLHVCQUF1QjtJQUN2QixVQUFVO0lBQ1YsaUNBQWlDO0lBQ2pDLHdCQUF3QjtJQUN4QixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFDbkIsK0JBQStCO0FBQ25DOztJQUVJOztJQUVBO0lBQ0E7SUFDQTs7UUFFSTtZQUNJLDRCQUE0QjtZQUM1QixZQUFZO1lBQ1osV0FBVztZQUNYLGFBQWE7WUFDYixzQ0FBc0M7WUFDdEMsb0NBQW9DO1FBQ3hDOztRQUVBO1lBQ0ksdUJBQXVCO1FBQzNCO1FBQ0E7WUFDSSx1QkFBdUI7UUFDM0I7OztBQUdSO0lBQ0kseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsV0FBVztJQUNYLG9DQUFvQztJQUNwQyxZQUFZO0lBQ1osWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSx3QkFBd0I7SUFDeEIsYUFBYTtJQUNiLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHdCQUF3QjtJQUN4QixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHFCQUFxQjtBQUN6Qjs7SUFFSTtRQUNJLHlCQUF5QjtRQUN6QixXQUFXO1FBQ1gsNEJBQTRCO0lBQ2hDO0lBQ0E7UUFDSSxtQkFBbUI7UUFDbkIsVUFBVTtRQUNWLFdBQVc7SUFDZjtJQUNBO1FBQ0ksa0NBQWtDO1FBQ2xDLHVCQUF1QjtRQUN2QixZQUFZO1FBQ1osV0FBVztRQUNYLGFBQWE7UUFDYix1Q0FBdUM7UUFDdkMsb0NBQW9DO0lBQ3hDO1FBQ0k7UUFDQSx1QkFBdUI7UUFDdkIsNEJBQTRCO1FBQzVCLFVBQVU7UUFDVjtBQUNSO0lBQ0ksMkJBQTJCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgICBoZWlnaHQ6IDk1c3ZoO1xcbiAgICAvKmJvcmRlcjogMnB4IGRhc2hlZCBibHVlOyovXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbmhlYWRlcntcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDIwMCU7XFxuICAgIHBhZGRpbmc6IDFlbSAxZW0gMWVtIDFlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG5jb250YWluZXIge1xcbiAgICAvKmJvcmRlcjogMnB4IGRhc2hlZCByZWQ7Ki9cXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG5jb250YWluZXIgPiBkaXYge1xcbiAgICBtYXJnaW46IDFlbSAxZW0gMWVtIDFlbTtcXG4gICAgd2lkdGg6IDMwJTtcXG4gICAgLypib3JkZXI6IDFweCBzb2xpZCBncmVlbnllbGxvdzsqL1xcbiAgICBwYWRkaW5nOiAxZW0gMWVtIDFlbSAxZW07XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudCA6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgd2lkdGg6IGNsYW1wKDQwcHgsIDUwJSwgNDAwcHgpIDtcXG59XFxuXFxuICAgIC5wbGF5ZXIge1xcbiAgICAgICAgXFxuICAgIH1cXG4gICAgLkFJIHtcXG4gICAgfVxcblxcbiAgICAgICAgLmZpZWxkIHtcXG4gICAgICAgICAgICAvKmJvcmRlcjogMXB4IGRhc2hlZCBibGFjazsqL1xcbiAgICAgICAgICAgIGhlaWdodDogMjBlbTtcXG4gICAgICAgICAgICB3aWR0aDogMjBlbTtcXG4gICAgICAgICAgICBkaXNwbGF5OiBncmlkO1xcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxMCUpO1xcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCBhdXRvKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC5maWVsZCA+IGRpdiB7XFxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgICAgICB9XFxuICAgICAgICAubmFtZSB7XFxuICAgICAgICAgICAgbWFyZ2luOiAxZW0gMWVtIDFlbSAxZW07XFxuICAgICAgICB9XFxuXFxuXFxuZm9vdGVye1xcbiAgICAvKmJvcmRlcjogMXB4IHNvbGlkIHJlZDsqL1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgYm90dG9tOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNTksIDIzNSwgMjM1KTtcXG4gICAgd2lkdGg6IDEwMHZ3O1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgdGV4dC1qdXN0aWZ5Om5ld3NwYXBlcjtcXG59XFxuXFxuLnBvc2l0aW9uc2JvYXJkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmlzcXVlO1xcbiAgICBvcGFjaXR5OiAwLjkgO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgd2lkdGg6IDk1dnc7XFxuICAgIGhlaWdodDogOTV2aDtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDIwMCU7XFxuICAgIHBhZGRpbmc6IDFlbSAxZW0gMWVtIDFlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XFxuICAgIGRpc3BsYXk6ZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcbn1cXG4gICAgXFxuICAgIC5wb3NpdGlvbnNib2FyZCA+IGRpdiB7XFxuICAgICAgICAvKmJvcmRlcjogMXB4IHNvbGlkIHJlZDsqL1xcbiAgICAgICAgd2lkdGg6IDk1dnc7XFxuICAgICAgICBtYXJnaW46IDFyZW0gMXJlbSAxcmVtIDFyZW0gO1xcbiAgICB9XFxuICAgIC5wb3NpdGlvbnNib2FyZCA+IGJ1dHRvbiB7XFxuICAgICAgICBmb250LXNpemU6IHh4LWxhcmdlO1xcbiAgICAgICAgd2lkdGg6IDV2dztcXG4gICAgICAgIGhlaWdodDogNXZ3O1xcbiAgICB9XFxuICAgIC5wb3NpdGlvbnNib2FyZCA+IC5maWVsZDEge1xcbiAgICAgICAgLypib3JkZXI6IDFweCBkYXNoZWQgZ3JlZW55ZWxsb3c7Ki9cXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICAgICAgaGVpZ2h0OiA1MHZoO1xcbiAgICAgICAgd2lkdGg6IDUwdmg7XFxuICAgICAgICBkaXNwbGF5OiBncmlkO1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIGF1dG8pO1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIGF1dG8pO1xcbiAgICB9XFxuICAgICAgICAuZmllbGQxID4gZGl2IHtcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZXZpb2xldDtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICB9XFxuLnJlZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6YXF1YW1hcmluZTtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImNvbnN0IGdiID0gcmVxdWlyZShcIi4vR2FtZWJvYXJkXCIpO1xuY29uc3Qgc2hpcCA9IHJlcXVpcmUoXCIuL1NoaXAuanNcIilcblxubGV0IGNhcnJpZWVyICAgPSBuZXcgc2hpcCg1LCBcImNhcnJpZWVyXCIpOyBcbmxldCBiYXR0bGVzaGlwID0gbmV3IHNoaXAoNCwgXCJiYXR0bGVzaGlwXCIpO1xubGV0IGNydWlzZXIgICAgPSBuZXcgc2hpcCgzLCBcImNydWlzZXJcIik7XG5sZXQgc3VibWFyaW5lICA9IG5ldyBzaGlwKDMsIFwic3VibWFyaW5lXCIpO1xubGV0IGRlc3Ryb3llciAgPSBuZXcgc2hpcCgyLCBcImRlc3Ryb3llclwiKTtcblxuY2xhc3MgQUkge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuYm9hcmQgPSBuZXcgZ2IoKTtcbiAgICB9XG5cbiAgICBib21iICgpe1xuXG4gICAgfVxuXG4gICAgcmFuZG9tQm9tYiAocGxheWVyKSB7XG4gICAgICAgIGxldCB4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgICAgICBsZXQgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcblxuICAgICAgICBpZiAoIXBsYXllci5Cb2FyZC5ib2FyZFt4XVt5XS5oaXQpIHtcbiAgICAgICAgICAgIHBsYXllci5Cb2FyZC5yZWNlaXZlQXR0YWNrICh4LCB5KTtcbiAgICAgICAgICAgIHBsYXllci50dXJuICA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJhbmRvbUJvbWIgKHBsYXllcik7XG4gICAgfVxuXG4gICAgcGxhY2VTaGlwIChzaGlwKXtcbiAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApOyAgXG4gICAgICAgIGlmIChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTApID4gNSkge1xuICAgICAgICAgICAgc2hpcC5wb3NpdGlvbiA9IHRydWU7ICBcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBzaGlwLnBvc2l0aW9uID0gZmFsc2U7ICBcbiAgICAgICAgfVxuICAgICAgICBsZXQgeDEgPSB4O1xuICAgICAgICBsZXQgeTEgPSB5O1xuICAgICAgICBsZXQgYm9vbCA9IHRydWU7XG4gICAgICAgIC8qXG4gICAgICAgIGNvbnNvbGUubG9nKHNoaXAubmFtZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHNoaXAucG9zaXRpb24pO1xuICAgICAgICBjb25zb2xlLmxvZyh4K1wiLS0tLS0tLS0tLS0tLS0tLVwiK3kpXG4gICAgICAgICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHgxID4gOSB8fCB5MSA+IDkgfHwgdGhpcy5ib2FyZC5ib2FyZFt4MV1beTFdLnNoaXApIHtcbiAgICAgICAgICAgICAgICBib29sID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcC5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB5MSsrO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICB4MSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib29sKSB7XG4gICAgICAgICAgICB0aGlzLmJvYXJkLnBsYWNlU2hpcHMoc2hpcCwgeCwgeSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5wbGFjZVNoaXAoc2hpcCk7XG4gICAgICAgIH1cblxuXG5cbiAgICB9XG59XG5cbmNvbnN0IGFpID0gbmV3IEFJKCk7XG5haS5wbGFjZVNoaXAoY2FycmllZXIpO1xuYWkucGxhY2VTaGlwKGJhdHRsZXNoaXApO1xuYWkucGxhY2VTaGlwKGNydWlzZXIpO1xuYWkucGxhY2VTaGlwKHN1Ym1hcmluZSk7XG5haS5wbGFjZVNoaXAoZGVzdHJveWVyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhaTsiLCJjbGFzcyBHYW1lYm9hcmQge1xuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5ib2FyZCA9IFtbbnVsbF0sW251bGxdLFtudWxsXSxbbnVsbF0sW251bGxdLFtudWxsXSxbbnVsbF0sW251bGxdLFtudWxsXSxbbnVsbF1dO1xuICAgICAgICB0aGlzLnNoaXBzID0gNTtcbiAgICAgICAgdGhpcy5hbGxTaW5rID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZFtpXVtqXSA9IHtzaGlwIDogbnVsbCxoaXQgOiBmYWxzZX07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwbGFjZVNoaXBzIChzaGlwLCB4LCB5KXtcbiAgICAgICAgLy95b3UgbmVlZCB0byBwbGFjZSBzaGlwcyB3aXRob3V0IGNvbmZsaWN0XG4gICAgICAgIGlmKHggPCAwIHx8IHggPiAxMCB8fCB5IDwgMCB8fCB5ID4gMTAgKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid3JvbmcgY29vcmRpbmF0ZXMgIVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuYm9hcmRbeF1beV0uc2hpcCA9IHNoaXA7XG4gICAgICAgICAgaWYgKHNoaXAucG9zaXRpb24pIHtcbiAgICAgICAgICAgIHkrKztcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHgrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWNlaXZlQXR0YWNrICh4LCB5KXtcbiAgICAgICAgaWYgKHRoaXMuYm9hcmRbeF1beV0uc2hpcCkge1xuICAgICAgICAgICAgbGV0IHNoaXAgPSAgdGhpcy5ib2FyZFt4XVt5XS5zaGlwOyBcbiAgICAgICAgICAgIHNoaXAuaGl0KCkgO1xuICAgICAgICAgICAgdGhpcy5ib2FyZFt4XVt5XS5oaXQgPSB0cnVlOyAvL2FscmVhZHkgYm9vbWJlZCBcbiAgICAgICAgICAgIGlmIChzaGlwLnN1bmspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNoaXBzLS07ICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmJvYXJkW3hdW3ldLmhpdCA9IHRydWU7IC8vYWxyZWFkeSBib29tYmVkICAgXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2hpcHMgPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5hbGxTaW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lYm9hcmQ7IiwiY29uc3QgZ2IgPSByZXF1aXJlKFwiLi9HYW1lYm9hcmRcIik7XG5cbmNsYXNzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5Cb2FyZCA9IG5ldyBnYigpO1xuICAgICAgICB0aGlzLnR1cm4gPSB0cnVlO1xuICAgIH1cbn1cblxubGV0ICBQbGF5ZXIxID0gbmV3IFBsYXllcigpO1xubW9kdWxlLmV4cG9ydHMgPSBQbGF5ZXIxOyIsImNsYXNzIFNoaXAge1xuICAgIGNvbnN0cnVjdG9yKGwsIG5hbWUgKXtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsO1xuICAgICAgICB0aGlzLmhpdHMgPSAwO1xuICAgICAgICB0aGlzLnN1bmsgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRydWU7IC8vdHJ1ZSBpcyBob3Jpc29udGFsIGZhbHNlIGlzIHZlcnRpY2FsXG4gICAgfVxuXG4gICAgaGl0KCl7XG4gICAgICAgIHRoaXMuaGl0cysrO1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggPT0gdGhpcy5oaXRzKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3VuaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNTdW5rKCl7XG4gICAgICAgIHRoaXMuc3VuayA9IHRydWU7XG4gICAgfVxuXG4gICAgcmVwb3NpdGlvbigpe1xuICAgICAgICBpZiAodGhpcy5wb3NpdGlvbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hpcDsiLCJmdW5jdGlvbiBmaWVsZChkaXYpIHtcbiAgICBjb25zdCBmaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZGl2KTtcbiAgICBcbiAgICBpZiAoZmllbGRbMF0pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIG5ld0Rpdi5pZCA9IGBwJHtpfSR7an1gO1xuICAgICAgICAgICAgICAgIGZpZWxkWzBdLmFwcGVuZENoaWxkKG5ld0Rpdik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gIFxuICAgIH1cblxuICAgIGlmIChmaWVsZFsxXSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgbmV3RGl2LmlkID0gYGEke2l9JHtqfWA7XG4gICAgICAgICAgICAgICAgZmllbGRbMV0uYXBwZW5kQ2hpbGQobmV3RGl2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAgIFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaWVsZDsiLCJjbGFzcyBwbGFzaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihkaXYsIG51bSA9IDUsIGggPSB0cnVlKXtcbiAgICAgICAgdGhpcy5kaXYgPSBkaXY7XG4gICAgICAgIHRoaXMubnVtID0gbnVtO1xuICAgICAgICB0aGlzLmggPSBoO1xuICAgICAgICB0aGlzLmh2ID0gdGhpcy5oPzE6MTA7XG4gICAgICAgIHRoaXMucGxhY2UgPSB0cnVlO1xuICAgIH1cblxuICAgIHR1cm4ocCA9IHRoaXMuaCkge1xuICAgICAgICBpZiAocCkge1xuICAgICAgICAgICAgdGhpcy5oID0gZmFsc2VcbiAgICAgICAgICAgIHRoaXMuaHYgPSAxMDsgIFxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMuaCA9IHRydWVcbiAgICAgICAgICAgIHRoaXMuaHYgPSAxOyAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob3ZlcmluZygpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhvdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5kaXYpO1xuICAgICAgICBob3YuZm9yRWFjaChib3ggPT4ge1xuICAgICAgICAgICAgYm94LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID09IFwiYmxhY2tcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBob3ZbK2JveC5pZC5zdWJzdHJpbmcoMSwzKStpKnRoaXMuaHZdICYmIGhvdlsrYm94LmlkLnN1YnN0cmluZygxLDMpK2kqdGhpcy5odl0uc3R5bGUuYmFja2dyb3VuZENvbG9yID09IFwiYmxhY2tcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW55ZWxsb3dcIjtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhvdlsrYm94LmlkLnN1YnN0cmluZygxLDMpK2kqdGhpcy5odl0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICgoKCtib3guaWQuc3Vic3RyaW5nKDEsMykraSkgPCAoKGJveC5pZC5zdWJzdHJpbmcoMSwyKSoxMCsxMCkpKSB8fCAhdGhpcy5oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92Wytib3guaWQuc3Vic3RyaW5nKDEsMykraSp0aGlzLmh2XS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVueWVsbG93XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlID0gdHJ1ZTsgICBcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG92Wytib3guaWQuc3Vic3RyaW5nKDEsMykraSp0aGlzLmh2XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG92Wytib3guaWQuc3Vic3RyaW5nKDEsMykraSp0aGlzLmh2XSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgK2JveC5pZC5zdWJzdHJpbmcoMSwzKStpIDwgKGJveC5pZC5zdWJzdHJpbmcoMSwyKSoxMCsxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdlsrYm94LmlkLnN1YnN0cmluZygxLDMpK2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZSA9IGZhbHNlOyAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvdlsrYm94LmlkLnN1YnN0cmluZygxLDMpK2kqdGhpcy5odl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdlsrYm94LmlkLnN1YnN0cmluZygxLDMpK2kqdGhpcy5odl0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlID0gZmFsc2U7ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgKVxuICAgICAgICBcbiAgICAgICAgICBob3YuZm9yRWFjaChib3ggPT4gXG4gICAgICAgICAgICBib3guYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9PSBcImJsYWNrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW07IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG92Wytib3guaWQuc3Vic3RyaW5nKDEsMykraSp0aGlzLmh2XSAmJiBob3ZbK2JveC5pZC5zdWJzdHJpbmcoMSwzKStpKnRoaXMuaHZdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9PSBcImJsYWNrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciAhPSBcImJsYWNrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiYmx1ZXZpb2xldFwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3ZbK2JveC5pZC5zdWJzdHJpbmcoMSwzKStpKnRoaXMuaHZdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCgoK2JveC5pZC5zdWJzdHJpbmcoMSwzKStpKSA8ICgoYm94LmlkLnN1YnN0cmluZygxLDIpKjEwKzEwKSkpIHx8ICF0aGlzLmgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92Wytib3guaWQuc3Vic3RyaW5nKDEsMykraSp0aGlzLmh2XS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsdWV2aW9sZXRcIjsgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pICAgIFxuICAgICAgICAgICkgIFxuICAgIH1cblxuICAgIFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBsYXNpbmc7XG5cblxuIiwiY29uc3QgZmllbGQgICAgPSByZXF1aXJlKFwiLi9maWVsZC5qc1wiKTtcbmNvbnN0IGhvdmVyaW5nID0gcmVxdWlyZShcIi4vaG92ZXJpbmcuanNcIik7XG5jb25zdCBwbGF5ZXIxICAgPSByZXF1aXJlKFwiLi9QbGF5ZXIuanNcIik7XG5jb25zdCBzaGlwICAgICA9IHJlcXVpcmUoXCIuL1NoaXAuanNcIik7XG5cbmxldCBjYXJyaWVlciAgID0gbmV3IHNoaXAoNSwgXCJjYXJyaWVlclwiKTsgXG5sZXQgYmF0dGxlc2hpcCA9IG5ldyBzaGlwKDQsIFwiYmF0dGxlc2hpcFwiKTtcbmxldCBjcnVpc2VyICAgID0gbmV3IHNoaXAoMywgXCJjcnVpc2VyXCIpO1xubGV0IHN1Ym1hcmluZSAgPSBuZXcgc2hpcCgzLCBcInN1Ym1hcmluZVwiKTtcbmxldCBkZXN0cm95ZXIgID0gbmV3IHNoaXAoMiwgXCJkZXN0cm95ZXJcIik7XG5cbmxldCBjdXJyZW50U2hpcCA9IGNhcnJpZWVyO1xuLy9sZXQgIHBsYXllcjEgPSBuZXcgcGxheWVyKCk7XG5sZXQgaG92ID0gbmV3IGhvdmVyaW5nKFwiLmZpZWxkMSA+IGRpdlwiLCA1LCB0cnVlKTtcblxuZmllbGQoXCIuZmllbGRcIik7XG5maWVsZChcIi5maWVsZDFcIik7XG5cbmNvbnN0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIik7XG5jb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZmllbGQxID4gZGl2XCIpO1xuY29uc3QgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3NpdGlvbnNib2FyZFwiKTtcbmNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjb250YWluZXJcIik7XG5jb25zdCBzaGlwTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9zaXRpb25zYm9hcmQgPiBkaXYgPiBzcGFuXCIpO1xuY29uc3QgaHYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmh2XCIpO1xuY29uc3QgY2VsbHNBSSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuQUkgPiAuZmllbGQgPiBkaXZcIik7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cbiAgICBob3YuaG92ZXJpbmcoKTtcblxuXG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGN1cnJlbnRTaGlwLnJlcG9zaXRpb24oKTtcbiAgICAgICAgaG92LnR1cm4oIWN1cnJlbnRTaGlwLnBvc2l0aW9uKTtcbiAgICAgICAgaG92Lm51bSA9IGN1cnJlbnRTaGlwLmxlbmd0aDtcbiAgICAgICAgaG92LmhvdmVyaW5nKCk7XG4gICAgICAgIGh2LnRleHRDb250ZW50ID0gY3VycmVudFNoaXAucG9zaXRpb24/XCJob3Jpem9udGFsbHlcIjpcInZlcnRpY2FsbHlcIjtcbiAgICB9KTtcblxuICAgIGNlbGxzLmZvckVhY2goY2VsbD0+e1xuICAgICAgICBcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGhvdi5wbGFjZSkge1xuICAgICAgICAgICAgICAgIHBsYXllcjEuQm9hcmQucGxhY2VTaGlwcyhjdXJyZW50U2hpcCwgY2VsbC5pZC5zdWJzdHJpbmcoMSwyKSwgY2VsbC5pZC5zdWJzdHJpbmcoMiwzKSkgIFxuICAgICAgICAgICAgICAgIGRpc3BsYXkocGxheWVyMS5Cb2FyZC5ib2FyZCwgY2VsbHMpO1xuICAgICAgICAgICAgICAgIHN3aXRjaFNoaXAoKTtcbiAgICAgICAgICAgICAgICBob3YudHVybighY3VycmVudFNoaXAucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGhvdi5oID0gY3VycmVudFNoaXAucG9zaXRpb247XG4gICAgICAgICAgICAgICAgaG92Lm51bSA9IGN1cnJlbnRTaGlwLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBzaGlwTmFtZS50ZXh0Q29udGVudCA9IGN1cnJlbnRTaGlwLm5hbWU7XG4gICAgICAgICAgICAgICAgaG92LnBsYWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaHYudGV4dENvbnRlbnQgPSBjdXJyZW50U2hpcC5wb3NpdGlvbj9cIiBob3Jpem9udGFsbHkgXCI6XCIgdmVydGljYWxseSBcIjtcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIFxufTtcblxuZnVuY3Rpb24gc3dpdGNoU2hpcCAoKSB7XG5cbiAgICBzd2l0Y2ggKGN1cnJlbnRTaGlwKSB7XG4gICAgICAgIGNhc2UgY2FycmllZXI6XG4gICAgICAgICAgICBjdXJyZW50U2hpcCA9IGJhdHRsZXNoaXA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBiYXR0bGVzaGlwOlxuICAgICAgICAgICAgY3VycmVudFNoaXAgPSBjcnVpc2VyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgY3J1aXNlcjpcbiAgICAgICAgICAgIGN1cnJlbnRTaGlwID0gc3VibWFyaW5lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugc3VibWFyaW5lOlxuICAgICAgICAgICAgY3VycmVudFNoaXAgPSBkZXN0cm95ZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgZGlzcGxheShwbGF5ZXIxLkJvYXJkLmJvYXJkLCBjZWxsc0FJKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBcbn07XG5cbmZ1bmN0aW9uIGRpc3BsYXkoYm9hcmQsIGNlbGxzKSB7XG4gICAgLy9jb25zb2xlLmxvZyhjZWxscylcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoYm9hcmRbaV1bal0uc2hpcCkge1xuICAgICAgICAgICAgICAgIGNlbGxzW2kqMTAral0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJibGFja1wiO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgY2VsbHNbaSoxMCtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0O1xuXG5cbi8vZGlzcGxheShwbGF5ZXIxLkJvYXJkLmJvYXJkLCBjZWxscyk7XG5cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG5jb25zdCBpbml0ID0gcmVxdWlyZShcIi4vaW5pdGlhbGl6YXRpb24uanNcIik7XG5jb25zdCBBSSA9IHJlcXVpcmUoXCIuL0FJLmpzXCIpXG5jb25zdCBwbGF5ZXIgPSByZXF1aXJlKFwiLi9QbGF5ZXIuanNcIilcblxuaW5pdCgpO1xuXG5cbmNvbnN0IGNlbGxzUGxheWVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbGF5ZXIgPiAuZmllbGQgPiBkaXZcIik7XG5jb25zdCBjZWxsc0FpID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5BSSA+IC5maWVsZCA+IGRpdlwiKTtcblxuXG5jZWxsc1BsYXllci5mb3JFYWNoKGNlbGw9PntcbiAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKT0+e1xuICAgICAgICBpZihwbGF5ZXIudHVybiAmJiAhQUkuYm9hcmQuYm9hcmRbY2VsbC5pZC5zdWJzdHJpbmcoMSwyKV1bY2VsbC5pZC5zdWJzdHJpbmcoMiwzKV0uaGl0KXtcbiAgICAgICAgICAgIEFJLmJvYXJkLnJlY2VpdmVBdHRhY2sgKGNlbGwuaWQuc3Vic3RyaW5nKDEsMiksIGNlbGwuaWQuc3Vic3RyaW5nKDIsMykpO1xuICAgICAgICAgICAgcGxheWVyLnR1cm4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmKEFJLmJvYXJkLmJvYXJkW2NlbGwuaWQuc3Vic3RyaW5nKDEsMildW2NlbGwuaWQuc3Vic3RyaW5nKDIsMyldLnNoaXAgKXtcbiAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW55ZWxsb3dcIjsgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBBSS5yYW5kb21Cb21iKHBsYXllcik7XG4gICAgICAgIGRpc3BsYXkocGxheWVyLkJvYXJkLmJvYXJkLCBjZWxsc0FpKTtcbiAgICAgICAgaWYgKEFJLmJvYXJkLmFsbFNpbmspIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2FtZSBvdmVyIHlvdSB3aW5cIikgIFxuICAgICAgICB9XG4gICAgICAgIGlmIChwbGF5ZXIuQm9hcmQuYWxsU2luaykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJnYW1lIG92ZXIgeW91IGxvc3RcIikgIFxuICAgICAgICB9XG4gICAgfSlcbn0pO1xuXG5mdW5jdGlvbiBkaXNwbGF5KGJvYXJkLCBjZWxscykge1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChib2FyZFtpXVtqXS5zaGlwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJvYXJkW2ldW2pdLmhpdCkge1xuICAgICAgICAgICAgICAgICAgICBjZWxsc1tpKjEwK2pdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW55ZWxsb3dcIjsgXG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxzW2kqMTAral0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJibGFja1wiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGlmIChib2FyZFtpXVtqXS5oaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaSoxMCtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiOyBcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgY2VsbHNbaSoxMCtqXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vZGlzcGxheShBSS5ib2FyZC5ib2FyZCwgY2VsbHNQbGF5ZXIpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiZ2IiLCJzaGlwIiwiY2FycmllZXIiLCJiYXR0bGVzaGlwIiwiY3J1aXNlciIsInN1Ym1hcmluZSIsImRlc3Ryb3llciIsImFpIiwiY29uc3RydWN0b3IiLCJib2FyZCIsImJvbWIiLCJyYW5kb21Cb21iIiwicGxheWVyIiwieCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInkiLCJCb2FyZCIsImhpdCIsInJlY2VpdmVBdHRhY2siLCJ0dXJuIiwicGxhY2VTaGlwIiwicG9zaXRpb24iLCJ4MSIsInkxIiwiYm9vbCIsInBsYWNlU2hpcHMiLCJzaGlwcyIsImFsbFNpbmsiLCJqIiwiY29uc29sZSIsImxvZyIsInN1bmsiLCJQbGF5ZXIxIiwibCIsIm5hbWUiLCJoaXRzIiwiaXNTdW5rIiwicmVwb3NpdGlvbiIsImRpdiIsImZpZWxkIiwicXVlcnlTZWxlY3RvckFsbCIsIm5ld0RpdiIsIm51bSIsImgiLCJodiIsInBsYWNlIiwicCIsImhvdmVyaW5nIiwiaG92IiwiZm9yRWFjaCIsImJveCIsImFkZEV2ZW50TGlzdGVuZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzdWJzdHJpbmciLCJwbGF5ZXIxIiwiY3VycmVudFNoaXAiLCJidG4iLCJjZWxscyIsImNvbnRhaW5lciIsInNoaXBOYW1lIiwiY2VsbHNBSSIsImRpc3BsYXkiLCJ0ZXh0Q29udGVudCIsImNlbGwiLCJzd2l0Y2hTaGlwIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsImluaXQiLCJBSSIsImNlbGxzUGxheWVyIiwiY2VsbHNBaSJdLCJzb3VyY2VSb290IjoiIn0=